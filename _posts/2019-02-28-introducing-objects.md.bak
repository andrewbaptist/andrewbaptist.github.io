---
bg: "wine.jpg"
layout: post
title:  "Introducing Object Everywhere!"
summary: "How object will soon be everywhere"
categories: posts
tags: 'overview'
---
This site is meant to help evangilize for object storage. Object storage first came on the scene about 12 years ago 
as a reaction to the scale and performance limitations of traditional file systems. On the cloud it was introduced by 
[Amazon S3](https://press.aboutamazon.com/news-releases/news-release-details/amazon-web-services-launches-amazon-s3-simple-storage-service) 
On premises, it has been around in various flavors for much longer, but really became a popular option with Cleversafe around the same time.

What makes Object Storage so attactive today compared to other storage technologies is five factors

* *Scale* - singla namepace deploymenets in the hundreds of petabytes to exabytes
* *Performance* - due to its simple interface - it grows linearly as the system size grows
* *Cost* - typically 1/4 the cost of comparable file system alternative
* *Availability* - designed with virtually perfect durability and availability
* *Security* - built in Internet age and uses modern security techniques

You may think it is impossible to simultaneously achieve all these benefits, and may be wondering what you have to give up to get this. 
In reality you give up nothing and get all these advantages. 

POSIX was designed in an era where computers were not networked and the typical size of a system was measured in MB. While it has 
scaled both to support network attached file systems and scale out systems, some of the original decisions have resulted in a lot
of complexity and performance tradeoffs for features that are rarely used. The limitations above are mostly due to this legacy baggage.
Object storage is unshackled by legacy POSIX file systems requirements and a way to think of it is "File systems for the internet". 

~Scale~ 

Scale is the reason that is typically cited for using object storage, but it can be confusing why this is the case. As an example, ext4 
claims 1EB scale with billions of files, and XFS supports 8EB volumes with 2^64 files however  looking at the 
[RedHat documentation](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/performance_tuning_guide/chap-red_hat_enterprise_linux-performance_tuning_guide-storage_and_file_systems#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Considerations-File_systems) 
on this, they only support a maximum size of 50TB for ext4 and 500TB for XFS. With [Seagate now at 16TB](https://blog.seagate.com/craftsman-ship/hamr-milestone-seagate-achieves-16tb-capacity-on-internal-hamr-test-units/) spinning drives shortly and 
[Nimbus shipping 100TB SSD](https://nimbusdata.com/products/exadrive-platform/scalable-ssds/), it is no longer even possible to mount an ext4 file system over a single drive (let alone a RAID volume of these drives). 

It is worth examining why a file system "theoritical" capacity is so much lower than the 

